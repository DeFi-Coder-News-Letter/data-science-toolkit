dplyr::mutate(
custom_buckets = cut(
x = goal,
# sets the break points for cuts; see options for inclusion/exclusion details
breaks = c(0, 1000, 5000, 10000, 25000, 50000, 100000, Inf),
# ensures no use of scientific notation in labeling
dig.lab = 10
)
) %>%
dplyr::group_by(country, custom_buckets) %>%
# gets the grouped by within-categor counts
dplyr::tally() %>%
# base ggplot call
ggplot(., aes(custom_buckets, n)) +
geom_bar(aes(fill = country), color = "black", position = "dodge", stat="identity") +
# takes care of the precise labeling; hjust/vjust and angle need to be set visually
geom_text(aes(label=n, group=country), hjust=-0.20, angle=90, position = position_dodge(width=1)) +
# picking a colorblind-friendly color scheme and theme
viridis::scale_fill_viridis(discrete=TRUE, option="plasma") +
ggthemes::theme_economist() +
# custom axis limits; for this kind of chart I prefer to set these manually
scale_y_continuous(limits = c(0, 1250)) +
# setting legend and axis aesthetic details
theme(
legend.position = "top",
legend.title = element_text(size=12),
legend.text = element_text(size=12),
axis.text.x = element_text(size=8)
) +
# takes care of all labeling
labs(
title = paste0("Count of Campaigns by Goal Amount Bucket"),
y = "Number of Campaigns",
x = "Campaign Fundraising Goal Bucket (USD)",
fill = "Country of Origin"
)
base_df %>%
# select only our variables of interest
dplyr::select(goal, country) %>%
# filter to just 3 countries and set a goal cap
# this is mostly just arbitrary for the purpose of an easy-to-read exemplar
dplyr::filter(
country %in% c("IT","DE","FR")
) %>%
dplyr::mutate(
custom_buckets = cut(
x = goal,
# sets the break points for cuts; see options for inclusion/exclusion details
breaks = c(0, 1000, 5000, 10000, 25000, 50000, 100000, Inf),
# ensures no use of scientific notation in labeling
dig.lab = 10
)
) %>%
dplyr::group_by(country, custom_buckets) %>%
# gets teh grouped by within-category percent
summarise(n = n()) %>%
mutate(freq = n / sum(n)) %>%
# base ggplot call
ggplot(., aes(custom_buckets, freq)) +
geom_bar(aes(fill = country), color = "black", position = "dodge", stat="identity") +
# takes care of the precise labeling; hjust/vjust and angle need to be set visually
geom_text(aes(label=scales::percent(freq), group=country), hjust=-0.20, angle=90, position = position_dodge(width=1)) +
# picking a colorblind-friendly color scheme and theme
viridis::scale_fill_viridis(discrete=TRUE, option="plasma") +
ggthemes::theme_economist() +
# custom axis limits; for this kind of chart I prefer to set these manually
scale_y_continuous(labels = scales::percent, limits = c(0, 0.3)) +
# setting legend and axis aesthetic details
theme(
legend.position = "top",
legend.title = element_text(size=12),
legend.text = element_text(size=12),
axis.text.x = element_text(size=8)
) +
# takes care of all labeling
labs(
title = paste0("Count of Campaigns by Goal Amount Bucket"),
y = "Number of Campaigns",
x = "Campaign Fundraising Goal Bucket (USD)",
fill = "Country of Origin"
)
base_df %>%
# select only our variables of interest
dplyr::select(goal, country) %>%
# filter to just 3 countries and set a goal cap
# this is mostly just arbitrary for the purpose of an easy-to-read exemplar
dplyr::filter(
country %in% c("IT","DE","FR")
) %>%
dplyr::mutate(
custom_buckets = cut(
x = goal,
# sets the break points for cuts; see options for inclusion/exclusion details
breaks = c(0, 1000, 5000, 10000, 25000, 50000, 100000, Inf),
# ensures no use of scientific notation in labeling
dig.lab = 10
)
) %>%
dplyr::group_by(country, custom_buckets) %>%
# gets the grouped by within-categor counts
dplyr::tally() %>%
# base ggplot call
ggplot(., aes(custom_buckets, n)) +
geom_bar(aes(fill = country), color = "black", position = "dodge", stat="identity") +
# takes care of the precise labeling; hjust/vjust and angle need to be set visually
geom_text(aes(label=n, group=country), hjust=-0.20, angle=90, position = position_dodge(width=1)) +
# picking a colorblind-friendly color scheme and theme
viridis::scale_fill_viridis(discrete=TRUE, option="plasma") +
ggthemes::theme_economist() +
# custom axis limits; for this kind of chart I prefer to set these manually
scale_y_continuous(limits = c(0, 800)) +
# setting legend and axis aesthetic details
theme(
legend.position = "top",
legend.title = element_text(size=12),
legend.text = element_text(size=12),
axis.text.x = element_text(size=8)
) +
# takes care of all labeling
labs(
title = paste0("Count of Campaigns by Goal Amount Bucket"),
y = "Number of Campaigns",
x = "Campaign Fundraising Goal Bucket (USD)",
fill = "Country of Origin"
)
base_df %>%
# select only our variables of interest
dplyr::select(goal, country) %>%
# filter to just 3 countries and set a goal cap
# this is mostly just arbitrary for the purpose of an easy-to-read exemplar
dplyr::filter(
country %in% c("IT","DE","FR")
) %>%
dplyr::mutate(
custom_buckets = cut(
x = goal,
# sets the break points for cuts; see options for inclusion/exclusion details
breaks = c(0, 1000, 5000, 10000, 25000, 50000, 100000, Inf),
# ensures no use of scientific notation in labeling
dig.lab = 10
)
) %>%
dplyr::group_by(country, custom_buckets) %>%
# gets the grouped by within-categor counts
dplyr::tally() %>%
# base ggplot call
ggplot(., aes(custom_buckets, n)) +
geom_bar(aes(fill = country), color = "black", position = "dodge", stat="identity") +
# takes care of the precise labeling; hjust/vjust and angle need to be set visually
geom_text(aes(label=n, group=country), hjust=-0.20, angle=90, position = position_dodge(width=1)) +
# picking a colorblind-friendly color scheme and theme
viridis::scale_fill_viridis(discrete=TRUE, option="plasma") +
ggthemes::theme_economist() +
# custom axis limits; for this kind of chart I prefer to set these manually
scale_y_continuous(limits = c(0, 700)) +
# setting legend and axis aesthetic details
theme(
legend.position = "top",
legend.title = element_text(size=12),
legend.text = element_text(size=12),
axis.text.x = element_text(size=8)
) +
# takes care of all labeling
labs(
title = paste0("Count of Campaigns by Goal Amount Bucket"),
y = "Number of Campaigns",
x = "Campaign Fundraising Goal Bucket (USD)",
fill = "Country of Origin"
)
base_df %>%
# select only our variables of interest
dplyr::select(goal, country) %>%
# filter to just 3 countries and set a goal cap
# this is mostly just arbitrary for the purpose of an easy-to-read exemplar
dplyr::filter(
country %in% c("IT","DE","FR")
) %>%
dplyr::mutate(
custom_buckets = cut(
x = goal,
# sets the break points for cuts; see options for inclusion/exclusion details
breaks = c(0, 1000, 5000, 10000, 25000, 50000, 100000, Inf),
# ensures no use of scientific notation in labeling
dig.lab = 10
)
) %>%
dplyr::group_by(country, custom_buckets) %>%
# gets teh grouped by within-category percent
summarise(n = n()) %>%
mutate(freq = n / sum(n)) %>%
# base ggplot call
ggplot(., aes(custom_buckets, freq)) +
geom_bar(aes(fill = country), color = "black", position = "dodge", stat="identity") +
# takes care of the precise labeling; hjust/vjust and angle need to be set visually
geom_text(aes(label=scales::percent(freq), group=country), hjust=-0.20, angle=90, position = position_dodge(width=1)) +
# picking a colorblind-friendly color scheme and theme
viridis::scale_fill_viridis(discrete=TRUE, option="plasma") +
ggthemes::theme_economist() +
# custom axis limits; for this kind of chart I prefer to set these manually
scale_y_continuous(labels = scales::percent, limits = c(0, 0.3)) +
# setting legend and axis aesthetic details
theme(
legend.position = "top",
legend.title = element_text(size=12),
legend.text = element_text(size=12),
axis.text.x = element_text(size=8)
) +
# takes care of all labeling
labs(
title = paste0("Count of Campaigns by Goal Amount Bucket"),
y = "Number of Campaigns",
x = "Campaign Fundraising Goal Bucket (USD)",
fill = "Country of Origin"
)
base_df %>%
# select only our variables of interest
dplyr::select(goal, country) %>%
# filter to just 3 countries and set a goal cap
# this is mostly just arbitrary for the purpose of an easy-to-read exemplar
dplyr::filter(
country %in% c("IT","DE","FR")
) %>%
dplyr::mutate(
custom_buckets = cut(
x = goal,
# sets the break points for cuts; see options for inclusion/exclusion details
breaks = c(0, 1000, 5000, 10000, 25000, 50000, 100000, Inf),
# ensures no use of scientific notation in labeling
dig.lab = 10
)
) %>%
dplyr::group_by(country, custom_buckets)
base_df %>%
# select only our variables of interest
dplyr::select(goal, country) %>%
# filter to just 3 countries and set a goal cap
# this is mostly just arbitrary for the purpose of an easy-to-read exemplar
dplyr::filter(
country %in% c("IT","DE","FR")
) %>%
dplyr::mutate(
custom_buckets = cut(
x = goal,
# sets the break points for cuts; see options for inclusion/exclusion details
breaks = c(0, 1000, 5000, 10000, 25000, 50000, 100000, Inf),
# ensures no use of scientific notation in labeling
dig.lab = 10
)
) %>%
dplyr::group_by(country, custom_buckets) %>%
# gets teh grouped by within-category percent
summarise(n = n())
base_df %>%
# select only our variables of interest
dplyr::select(goal, country) %>%
# filter to just 3 countries and set a goal cap
# this is mostly just arbitrary for the purpose of an easy-to-read exemplar
dplyr::filter(
country %in% c("IT","DE","FR")
) %>%
dplyr::mutate(
custom_buckets = cut(
x = goal,
# sets the break points for cuts; see options for inclusion/exclusion details
breaks = c(0, 1000, 5000, 10000, 25000, 50000, 100000, Inf),
# ensures no use of scientific notation in labeling
dig.lab = 10
)
) %>%
dplyr::group_by(country, custom_buckets) %>%
# gets teh grouped by within-category percent
dplyr::summarise(n = n()) %>%
dplyr::mutate(freq = n / sum(n)) %>%
# base ggplot call
ggplot(., aes(custom_buckets, freq)) +
geom_bar(aes(fill = country), color = "black", position = "dodge", stat="identity") +
# takes care of the precise labeling; hjust/vjust and angle need to be set visually
geom_text(aes(label=scales::percent(freq), group=country), hjust=-0.20, angle=90, position = position_dodge(width=1)) +
# picking a colorblind-friendly color scheme and theme
viridis::scale_fill_viridis(discrete=TRUE, option="plasma") +
ggthemes::theme_economist() +
# custom axis limits; for this kind of chart I prefer to set these manually
scale_y_continuous(labels = scales::percent, limits = c(0, 0.3)) +
# setting legend and axis aesthetic details
theme(
legend.position = "top",
legend.title = element_text(size=12),
legend.text = element_text(size=12),
axis.text.x = element_text(size=8)
) +
# takes care of all labeling
labs(
title = paste0("Count of Campaigns by Goal Amount Bucket"),
y = "Number of Campaigns",
x = "Campaign Fundraising Goal Bucket (USD)",
fill = "Country of Origin"
)
# setting the appropriate working directory
knitr::opts_knit$set(root.dir = '~/Desktop/personal/personal_code/data-science-toolkit/')
# first a few general setup / housekeeping items
# setting scipen options to kill all use of scientific notation
options(scipen = 999)
# basic packages needed throughout:
library(plyr) # always load prior to dplyr / tidyverse if needed
library(tidyverse) # for all things tidy
library(janitor) # for data cleaning and some utility functions
library(DataExplorer) # allows for creation of missing values map
library(RCurl) # Provides functions to allow one to compose general HTTP requests, etc. in R
library(broom) # for tidy modeling and displaying of model / test results
library(ggthemes) # for more custom ggplot themes
# if I reference functions that are more niche, I will call them explicitly in-line as well
# importing the dataset from the CSV
base_df <- read.csv("./hypothesis-tests/data/ks-projects-201801-sampled.csv")
# taking a preliminary look at the structure of the dataset
glimpse(base_df)
# tidying variable names and dropping any useless rows / columns
base_df <- base_df %>%
# converts to underscore case and cleans up column names
janitor::clean_names() %>%
# drops all rows and columns that are entirely empty
janitor::remove_empty(which = c("rows","cols"))
DataExplorer::plot_missing(base_df) # shows % of NAs within each variable
# dropping any and all NULLs entirely, and rechecking our missing map to double check
base_df <- base_df[complete.cases(base_df),]
DataExplorer::plot_missing(base_df) # shows % of NAs within each variable
# packages useful for high-level summary stats (and more as well as we'll see later)
library(psych)
library(Hmisc)
# omit = TRUE (used below) keeps only the numeric variables; default is = FALSE and coerces non-numerics
# Hmisc::describe(base_df)
psych::describe(x = base_df, IQR = TRUE, omit = TRUE)
base_df %>%
# select only our variables of interest
dplyr::select(goal, country) %>%
# filter to just 3 countries and set a goal cap
# this is mostly just arbitrary for the purpose of an easy-to-read exemplar
dplyr::filter(
country %in% c("IT","DE","FR"),
goal <= 100000
) %>%
# base ggplot call
ggplot(., aes(x=goal, fill=country)) +
# specifying the histogram and the bin count
geom_histogram(color = "black", position="dodge", bins=20) +
# picking a colorblind-friendly color scheme and theme
viridis::scale_fill_viridis(discrete=TRUE, option="plasma") +
ggthemes::theme_economist() +
# setting legend aesthetic details
theme(
legend.position = "top",
legend.title = element_text(size=12),
legend.text = element_text(size=12)
) +
# takes care of all labeling
labs(
title = paste0("Histogram of Selected Countries' Goal Distribution"),
y = "Number of Campaigns",
x = "Campaign Fundraising Goal (USD)",
fill = "Country of Origin"
)
base_df %>%
# select only our variables of interest
dplyr::select(goal, country) %>%
# filter to just 3 countries and set a goal cap
# this is mostly just arbitrary for the purpose of an easy-to-read exemplar
dplyr::filter(
country %in% c("IT","DE","FR")
) %>%
dplyr::mutate(
custom_buckets = cut(
x = goal,
# sets the break points for cuts; see options for inclusion/exclusion details
breaks = c(0, 1000, 5000, 10000, 25000, 50000, 100000, Inf),
# ensures no use of scientific notation in labeling
dig.lab = 10
)
) %>%
dplyr::group_by(country, custom_buckets) %>%
# gets the grouped by within-categor counts
dplyr::tally() %>%
# base ggplot call
ggplot(., aes(custom_buckets, n)) +
geom_bar(aes(fill = country), color = "black", position = "dodge", stat="identity") +
# takes care of the precise labeling; hjust/vjust and angle need to be set visually
geom_text(aes(label=n, group=country), hjust=-0.20, angle=90, position = position_dodge(width=1)) +
# picking a colorblind-friendly color scheme and theme
viridis::scale_fill_viridis(discrete=TRUE, option="plasma") +
ggthemes::theme_economist() +
# custom axis limits; for this kind of chart I prefer to set these manually
scale_y_continuous(limits = c(0, 700)) +
# setting legend and axis aesthetic details
theme(
legend.position = "top",
legend.title = element_text(size=12),
legend.text = element_text(size=12),
axis.text.x = element_text(size=8)
) +
# takes care of all labeling
labs(
title = paste0("Count of Campaigns by Goal Amount Bucket"),
y = "Number of Campaigns",
x = "Campaign Fundraising Goal Bucket (USD)",
fill = "Country of Origin"
)
base_df %>%
# select only our variables of interest
dplyr::select(goal, country) %>%
# filter to just 3 countries and set a goal cap
# this is mostly just arbitrary for the purpose of an easy-to-read exemplar
dplyr::filter(
country %in% c("IT","DE","FR")
) %>%
dplyr::mutate(
custom_buckets = cut(
x = goal,
# sets the break points for cuts; see options for inclusion/exclusion details
breaks = c(0, 1000, 5000, 10000, 25000, 50000, 100000, Inf),
# ensures no use of scientific notation in labeling
dig.lab = 10
)
) %>%
dplyr::group_by(country, custom_buckets) %>%
# gets teh grouped by within-category percent
dplyr::summarise(n = n()) %>%
dplyr::mutate(freq = n / sum(n)) %>%
# base ggplot call
ggplot(., aes(custom_buckets, freq)) +
geom_bar(aes(fill = country), color = "black", position = "dodge", stat="identity") +
# takes care of the precise labeling; hjust/vjust and angle need to be set visually
geom_text(aes(label=scales::percent(freq), group=country), hjust=-0.20, angle=90, position = position_dodge(width=1)) +
# picking a colorblind-friendly color scheme and theme
viridis::scale_fill_viridis(discrete=TRUE, option="plasma") +
ggthemes::theme_economist() +
# custom axis limits; for this kind of chart I prefer to set these manually
scale_y_continuous(labels = scales::percent, limits = c(0, 0.3)) +
# setting legend and axis aesthetic details
theme(
legend.position = "top",
legend.title = element_text(size=12),
legend.text = element_text(size=12),
axis.text.x = element_text(size=8)
) +
# takes care of all labeling
labs(
title = paste0("Count of Campaigns by Goal Amount Bucket"),
y = "Number of Campaigns",
x = "Campaign Fundraising Goal Bucket (USD)",
fill = "Country of Origin"
)
base_df %>%
# select only our variables of interest
dplyr::select(goal, country) %>%
# filter to just 2 countries and set a goal cap
# this is mostly just arbitrary for the purpose of an easy-to-read exemplar
dplyr::filter(
country %in% c("GB","FR"),
goal <= 25000
) %>%
# base ggplot call
ggplot(., aes(x=goal, fill=country)) +
# specifying the density plot, alpha modulates translucency
geom_density(color = "black", alpha = 0.8) +
# picking a colorblind-friendly color scheme and theme
viridis::scale_fill_viridis(discrete=TRUE, option="plasma") +
ggthemes::theme_economist() +
# setting legend aesthetic details
theme(
legend.position = "top",
legend.title = element_text(size=12),
legend.text = element_text(size=12)
) +
# takes care of all labeling
labs(
title = paste0("Density Plot of Selected Countries' Goal Distribution"),
y = "Concentration Density",
x = "Campaign Fundraising Goal (USD)",
fill = "Country of Origin"
)
base_df %>%
# select only our variables of interest
dplyr::select(goal, country, state) %>%
# filter to just 2 countries, 2 states (aka outcomes), and set a goal cap
# this is mostly just arbitrary for the purpose of an easy-to-read exemplar
dplyr::filter(
country %in% c("GB","FR"),
goal <= 25000,
state %in% c("failed","successful")
) %>%
# base ggplot call
ggplot(., aes(x=goal, fill=country)) +
# specifying the density plot, alpha modulates translucency
geom_density(color = "black", alpha = 0.8) +
# facet wraps to show one pane per state
facet_wrap(~state) +
# picking a colorblind-friendly color scheme and theme
viridis::scale_fill_viridis(discrete=TRUE, option="plasma") +
ggthemes::theme_economist() +
# setting legend aesthetic details
theme(
legend.position = "top",
legend.title = element_text(size=12),
legend.text = element_text(size=12)
) +
# takes care of all labeling
labs(
title = paste0("Density Plot of Selected Countries' Goal Distribution"),
y = "Concentration Density",
x = "Campaign Fundraising Goal (USD)",
fill = "Country of Origin"
)
# setting the appropriate working directory
knitr::opts_knit$set(root.dir = '/Users/pauljeffries/Desktop/personal/personal_code/private_projects/text_analysis_r/')
